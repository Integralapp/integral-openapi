openapi: 3.0.1
info:
  title: api
  version: ''
paths:
  /key/create:
    post:
      description: >
        This endpoint is used to generate an API key for a given user.  This API
        key is for the Application User it is assigned for only, and only for
        your API.
      operationId: apiKeys_generate
      tags:
        - ApiKeys
      parameters: []
      responses:
        '200':
          description: Returns the API key object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
      summary: Generate an API key
      security: &ref_0
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: >
                    This is a unique index on your database to find users.  This
                    will allow us to know which API key associates to each user
                    on your application's end.
                description:
                  type: string
                  description: >
                    This is the description applied to an API key to identify it
                    for a human. Use this to describe who the key belongs to, or
                    why this key is relevant/exists.
                isSandbox:
                  type: boolean
                  description: >
                    This value is a boolean to determine whether the key is for
                    Sandbox use only or not. If it is for sandbox use, it will
                    not be able to access real data and will only be able to
                    work with templated data.
              required:
                - userId
  /key/{userId}:
    get:
      description: |
        Retrieve all API keys for the given Application User
      operationId: apiKeys_retrieve
      tags:
        - ApiKeys
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >
            The response of this API request provides back a list of information
            on all generated API keys for a given Application User.

            ** This list does contain revoked and paused API keys **
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
      summary: Get Application User's API keys
      security: *ref_0
  /key/pause:
    put:
      description: >
        Given an API Key generated for your application's user, this endpoint
        allows you to pause the API key.
      operationId: apiKeys_pause
      tags:
        - ApiKeys
      parameters: []
      responses:
        '200':
          description: >-
            The response of this API request gives back information on
            Application User's API Key that was paused
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
      summary: Pause an API key
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                  description: >-
                    This API key is generated by Integral and passed to the
                    Application User.
              required:
                - apiKey
  /key/revoke:
    delete:
      description: >
        This endpoint is used to revoke a key. 

        Revoking an API key means making all of it's content and previous data
        still persistent, but no longer usable. 

        Once a key is revoked, it can never be set back to normal.
      operationId: apiKeys_revoke
      tags:
        - ApiKeys
      parameters: []
      responses:
        '200':
          description: >-
            The response of this API request gives back information on an
            Application User's API Key that was revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
      summary: Revoke an API Key
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                  description: >-
                    This API key is generated by Integral and passed to the
                    Application User.
              required:
                - apiKey
  /user:
    post:
      description: >
        Use this endpoint to create an application user. With an application
        user, you define an 'API key owner' that holds top level information
        that is constant for all API keys made for a user
      operationId: applicationUser_create
      tags:
        - ApplicationUser
      parameters: []
      responses:
        '200':
          description: Response fields to create an application user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationUserCreateResponse'
      summary: Create an Application User
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: >
                    This is a unique index on your database to find users.  This
                    will allow us to know which API key associates to each user
                    on your application's end.
                tierId:
                  type: string
                  description: >
                    This is an ID provided by Integral to reference an
                    application tier you would like to assign for this user. You
                    can find the application tier IDs by sending a GET request
                    to the `/public/tiers` endpoint.
                description:
                  type: string
                  description: Generic description to describe the given Application User
              required:
                - userId
                - tierId
  /user/{userId}:
    get:
      description: >-
        This endpoint takes in an Application User's ID and returns back
        relevant information about the user
      operationId: applicationUser_get
      tags:
        - ApplicationUser
      parameters:
        - name: userId
          in: path
          description: >
            This is a unique index on your database to find users.  This will
            allow us to know which API key associates to each user on your
            application's end.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            Response body for the Retrieve endpoint of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationUser'
      summary: Get an Application User
      security: *ref_0
  /parse/pre-process:
    post:
      description: >
        This endpoint should be put in the pre-processing middleware: 
        Authentication, Access Control, Dynamic Rate Limiting, Idempotency,
        Versioning, Sandbox, and more.
      operationId: parse_pre-process
      tags:
        - Parse
      parameters: []
      responses:
        '200':
          description: >
            The response of this API request can vary to return back matched
            sandbox data, a graceful and informative error, or information for
            you to know which user is accessing your API and some general
            information about the incoming request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreProcessApiResponse'
      summary: Pre-Process Your Public API
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                  description: >
                    This API key is the key passed in by your API’s user. This
                    is crucial for us to parse out your application’s user
                ip:
                  type: string
                  description: >-
                    IP address of the incoming request so we can rate limit on
                    top of it.
                method:
                  type: string
                  description: >
                    HTTP method of the incoming request Allowed values: `GET`,
                    `POST`, `PUT`, `DELETE`, `PATCH`, `OPTIONS`, `CONNECT`,
                    `TRACE`
                requestBody:
                  type: object
                  additionalProperties: {}
                  description: >
                    The request body from the incoming request from input
                    validation. Null if request method is a GET
                headers:
                  type: object
                  additionalProperties: {}
                  description: |
                    Headers from the incoming request
                path:
                  type: string
                  description: >
                    Path (with all variables inside), from the request to match
                    endpoints created on the Integral platform.
                queryParams:
                  type: object
                  additionalProperties: {}
                  description: >
                    The query parameters (parameters in the URL that come after
                    the base URL and ?) of a request object. Pass in an empty
                    object if it doesn’t exist.
                metadata:
                  type: object
                  additionalProperties: {}
                  description: >
                    A single level key-value JSON object that can be used to
                    store custom data for the API request; keys and values must
                    be strings
                idempotencyKey:
                  type: string
                  description: >
                    This key is a **user generated** unique identifier to map to
                    a request. This allows requests to be safely retry requests
                    without the risk of duplicating operations.

                    `GET`, `PUT`, and `DELETE` are generally safe to retry
                    (according to standard REST practices). For `POST` and
                    `PATCH` requests, is recommended to send and store the
                    `idempotencyKey` in their system.
              required:
                - apiKey
                - ip
                - method
                - requestBody
                - headers
                - path
                - queryParams
  /parse/post-process:
    post:
      description: >
        This endpoint only works in conjunction to the Pre-processing endpoint
        `POST /parse/pre-processing`.  Without it, the necessary information for
        this endpoint won't be found.
      operationId: parse_post-process
      tags:
        - Parse
      parameters: []
      responses:
        '200':
          description: >
            The response of this API request can vary to return back either a
            descriptive error message for you (not your user) to use for
            debugging, or information on the API request and the Idempotency Key
            provided (to indicate a successful operation).

            If idempotencyInfo does not exist for a given endpoint (the endpoint
            may not have it configured), then we will return back the request
            and idempotency key information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostProcessApiResponse'
      summary: Post-Process Your Public API
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                endpointId:
                  type: string
                  description: >-
                    This endpoint ID is taken from the pre-processing endpoint
                    and passed in here.
                requestId:
                  type: string
                  description: >-
                    This request ID is taken from the pre-processing endpoint
                    and passed in here.
                responseStatusCode:
                  type: integer
                  description: >
                    This is the status code your API will respond with for the
                    given request. Must have a `2xx` status code.
                requestBody:
                  type: object
                  additionalProperties: {}
                  description: >
                    This request body comes from expected return from your
                    services. If the same idempotency key is sent, then we'll
                    automatically return back this response body.
                apiKey:
                  type: string
                  description: >
                    This API key is the key passed in by your API's user. This
                    is crucial for us to parse out your application's user. You
                    can also find this apiKey returned by our pre-process
                    endpoint.
                idempotencyKey:
                  type: string
                  description: >
                    This key is a **user generated** unique identifier to map to
                    a request. This allows requests to be safely retry requests
                    without the risk of duplicating operations.

                    `GET`, `PUT`, and `DELETE` are generally safe to retry
                    (according to standard REST practices). For `POST` and
                    `PATCH` requests, is recommended to send and store the
                    `idempotencyKey` in their system.

                    **It will be returned to you by our pre-process endpoint for
                    consistency purposes.**
              required:
                - endpointId
                - requestId
                - responseStatusCode
                - requestBody
                - apiKey
                - idempotencyKey
  /tiers:
    get:
      description: >
        This request is used to fetch all the Tiers allowed to be assigned to a
        user, before creating one. Call this endpoint before creating an
        Application User
      operationId: tiers_get-all
      tags:
        - Tiers
      parameters: []
      responses:
        '200':
          description: >-
            The response of this API request provides back a list of information
            on all Application Tiers created for the given Application ID.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationTier'
      summary: Get All Application tiers
      security: *ref_0
components:
  schemas:
    ApplicationUserCreateResponse:
      type: object
      properties:
        applicationUser:
          $ref: '#/components/schemas/ApplicationUser'
        apiKey:
          $ref: '#/components/schemas/ApiKey'
      required:
        - applicationUser
        - apiKey
    ApplicationUser:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        applicationUserForeignId:
          type: string
        metadata:
          type: object
          additionalProperties: {}
        applicationRole:
          $ref: '#/components/schemas/ApplicationRole'
        application:
          $ref: '#/components/schemas/Application'
      required:
        - id
        - createdAt
        - updatedAt
        - applicationUserForeignId
        - applicationRole
        - application
    ApplicationRole:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        role:
          type: string
        description:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - role
    Application:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        name:
          type: string
        description:
          type: string
        publicId:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
        - publicId
    ApiKey:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        apiKey:
          type: string
        isPaused:
          type: boolean
        isRevoked:
          type: boolean
        isRotatedOff:
          type: boolean
        numOfRequest:
          type: integer
        firstTimeRequest:
          type: string
        applicationUser:
          $ref: '#/components/schemas/ApplicationUser'
      required:
        - id
        - createdAt
        - updatedAt
        - deletedAt
        - apiKey
        - isPaused
        - isRevoked
        - isRotatedOff
        - numOfRequest
        - firstTimeRequest
        - applicationUser
    PreProcessApiResponse:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/RequestPreProcessResponse'
        statusCode:
          type: integer
        user:
          $ref: '#/components/schemas/UserParseResponse'
        application:
          $ref: '#/components/schemas/ApplicationParseResponse'
        returnBackToUser:
          $ref: '#/components/schemas/ReturnBackToUserResponse'
      required:
        - request
        - statusCode
        - user
        - application
    PostProcessApiResponse:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/RequestType'
        idempotencyKey:
          $ref: '#/components/schemas/IdempotencyKeyType'
      required:
        - request
        - idempotencyKey
    RequestType:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        userApiKey:
          type: object
          additionalProperties: {}
        route:
          type: string
        method:
          type: string
        headers:
          type: object
          additionalProperties: {}
        traceback:
          type: object
          additionalProperties: {}
        ip:
          type: string
        isSandbox:
          type: boolean
        metadata:
          type: object
          additionalProperties: {}
        responseStatusCode:
          type: integer
        responseBody:
          type: object
          additionalProperties: {}
      required:
        - id
        - createdAt
        - updatedAt
        - userApiKey
        - route
        - method
        - headers
        - ip
        - isSandbox
        - responseStatusCode
        - responseBody
    IdempotencyKeyType:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        key:
          type: string
        endpoint:
          type: object
          additionalProperties: {}
        expiresAt:
          type: string
        apiKey:
          type: object
          additionalProperties: {}
        responseStatusCode:
          type: integer
        responseBody:
          type: object
          additionalProperties: {}
      required:
        - id
        - createdAt
        - updatedAt
        - key
        - endpoint
        - expiresAt
        - apiKey
        - responseBody
    ReturnBackToUserResponse:
      type: object
      properties:
        message:
          type: string
        solution:
          type: string
        apiKey:
          type: string
        error:
          type: boolean
        errorCode:
          type: string
        displayMessage:
          type: string
        documentationUrl:
          type: string
        causes:
          type: string
      required:
        - message
        - solution
        - errorCode
        - displayMessage
    ApplicationParseResponse:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
    UserParseResponse:
      type: object
      properties:
        integralId:
          type: string
        metadata:
          type: object
          additionalProperties: {}
        userId:
          type: string
        isAllowlistedOnEndpoint:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        idempotencyKey:
          type: string
      required:
        - integralId
        - userId
        - isAllowlistedOnEndpoint
    RequestPreProcessResponse:
      type: object
      properties:
        hasResponseContent:
          type: boolean
        environment:
          type: string
        id:
          type: string
        endpoint:
          $ref: '#/components/schemas/EndpointPreProcessType'
      required:
        - hasResponseContent
        - environment
        - id
        - endpoint
    EndpointPreProcessType:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    ApplicationTier:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        role:
          type: string
        description:
          type: string
        application:
          $ref: '#/components/schemas/Application'
        applicationRateLimit:
          $ref: '#/components/schemas/ApplicationRateLimit'
      required:
        - id
        - createdAt
        - updatedAt
        - role
        - description
        - application
        - applicationRateLimit
    ApplicationRateLimit:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        numOfRequests:
          type: integer
        timeInterval:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - numOfRequests
        - timeInterval
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
servers:
  - url: https://api.integralapi.co/public
    description: Production
  - url: http://localhost:4000/public
    description: Local
